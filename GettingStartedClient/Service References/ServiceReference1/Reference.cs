//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GettingStartedClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="ServiceReference1.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/add", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/addResponse")]
        double add(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/add", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/addResponse")]
        System.Threading.Tasks.Task<double> addAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/multiply", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/multiplyResponse")]
        double multiply(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/multiply", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/multiplyResponse")]
        System.Threading.Tasks.Task<double> multiplyAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/divide", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/divideResponse")]
        double divide(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/divide", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/divideResponse")]
        System.Threading.Tasks.Task<double> divideAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/subtract", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/subtractResponse")]
        double subtract(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/subtract", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/subtractResponse")]
        System.Threading.Tasks.Task<double> subtractAsync(double n1, double n2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : GettingStartedClient.ServiceReference1.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<GettingStartedClient.ServiceReference1.ICalculator>, GettingStartedClient.ServiceReference1.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double add(double n1, double n2) {
            return base.Channel.add(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> addAsync(double n1, double n2) {
            return base.Channel.addAsync(n1, n2);
        }
        
        public double multiply(double n1, double n2) {
            return base.Channel.multiply(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> multiplyAsync(double n1, double n2) {
            return base.Channel.multiplyAsync(n1, n2);
        }
        
        public double divide(double n1, double n2) {
            return base.Channel.divide(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> divideAsync(double n1, double n2) {
            return base.Channel.divideAsync(n1, n2);
        }
        
        public double subtract(double n1, double n2) {
            return base.Channel.subtract(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> subtractAsync(double n1, double n2) {
            return base.Channel.subtractAsync(n1, n2);
        }
    }
}
